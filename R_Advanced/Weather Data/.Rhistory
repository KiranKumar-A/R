N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 1000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 10000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 10000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 10000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 10000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
N  <- 10000000            #input
counter <- 0
for(i in rnorm(N)){
if(i>-1 & i<1){
counter =counter + 1
}
}
counter/N
profit <- revenue - expense
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expense
profit <- revenue - expenses
profit
tax <- round(profit * 0.3, 2)
tax
profit.after.tax <- profit - tax
profit.after.tax
profit.margin <- profit.after.tax/revenue
profit.margin
profit.margin <- round(profit.after.tax/revenue, 2)
profit.margin
profit.margin <- round(profit.after.tax/revenue, 2) *100
profit.margin
profit.margin <- round(profit.after.tax/revenue, 4) *100
profit.margin
mean_pat <- mean(profit.after.tax)
mean_pat
good.months  <- profit.after.tax > mean_pat
good.months
bad.months  <- !good.months
bad.months
best.month <- profit.after.tax == max(profit.after.tax)
max(profit.after.tax)
best.month
rep(8140.68, 12)
worst.month <- profit.after.tax == min (profit.after.tax)
worst.month
revenue.1000 <- round(revenue/1000)
revenue.1000
expenses.1000 <- round(expenses/1000)
expenses.1000
profit.1000 <- round(profit/1000)
profit.1000
profit.after.tax.1000 <- round(profit.after.tax / 1000)
profit.after.tax.1000
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
m <- rbind(
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
)
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m
rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
# profit for each month
profit <- revenue - expenses
profit
# profit after tax for each month (the tax rate is 30%)
tax <- round(profit * 0.3, 2)
tax
profit.after.tax <- profit - tax
profit.after.tax
# profit margin for each month - equals to profit a after tax divided by revenue
profit.margin <- round(profit.after.tax/revenue, 2) *100
profit.margin
# good months - where the profit after tax was greater than the mean for the year
mean_pat <- mean(profit.after.tax)
mean_pat
good.months  <- profit.after.tax > mean_pat
good.months
# bad months - where the profit after tax was less than the mean for the year
bad.months  <- !good.months
bad.months
# the best month - where the profit after tax was max for the year
best.month <- profit.after.tax == max(profit.after.tax)
best.month
# the worst month - where the profit after tax was min for the year
worst.month <- profit.after.tax == min (profit.after.tax)
worst.month
# Units of thousands
revenue.1000 <- round(revenue/1000)
revenue.1000
expenses.1000 <- round(expenses/1000)
expenses.1000
profit.1000 <- round(profit/1000)
profit.1000
profit.after.tax.1000 <- round(profit.after.tax / 1000)
profit.after.tax.1000
# output
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
# matrices
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month)
m
print("hello world")
3+2
sum(3,2)
3>2
3*2
8+1
x<-2
x
ls()
price <- c(100,200,NA)
price
install.packages('quantmod')
library("quantmod", lib.loc="~/R/win-library/3.4")
library(quantmod)
?quantmod
getSymbols('^INFY.NS', src = 'yahoo')
getSymbols('^INFY', src = 'yahoo')
getSymbols('^INFY', src = 'google')
getSymbols('INFY', src = 'google')
getSymbols('INFY.NS', src = 'google')
head(INFY)
getSymbols('NSE:INFY', src = 'google')
getSymbols('Infosys Ltd', src = 'google')
head(INFY)
getSymbols('Infosys Ltd.NS', src = 'google')
getSymbols('Infosys Ltd.NSE', src = 'google')
getSymbols('INFY.NS', src = 'yahoo')
getSymbols('INFY.NS', src = 'google')
getSymbols('INFY:NSE', src = 'google')
getSymbols('NSE:INFY', src = 'google')
getSymbols('SBIN.NS', src = 'google')
View(INFY)
View(`INFOSYS LTD`)
View(INFY)
?getSymbols
getSymbols('SBIN.NS', NSE, src = 'google')
getSymbols('SBIN.NS', env=NSE, src = 'google')
getSymbols('SBIN.NS', env=Nifty50, src = 'google')
getSymbols.google('INFY.NS')
getSymbols.google('INFY')
getSymbols.google('INFY', NSE)
?env
getSymbols('INFY.NS', src = 'yahoo' )
getSymbols('^INFY.NS', src = 'yahoo' )
getSymbols('SBIN.NS', src = 'yahoo' )
getSymbols("SBIN.NS", src = "yahoo" )
2+2
letters.factors <- as.factor(letters)
ls()
rm(letters)
price <- c(100,200,NULL)
price
length(price)
is.na(price)
x <- c(1,2,3,4)
x
y <- list(1,2,3,4)
y
my.list <- list(name=c("Robert", "Emma"), age = c (65, 54), retired = c(TRUE, FALSE))
my.list
my.list$age
my.list$age[1]
my.list$name[2]
B = matrix(c(2,4,3,5,7), nrow = 3, ncol = 2)
B = matrix(c(2,4,3,1,5,7), nrow = 3, ncol = 2)
B
data(iris)
data()
iris
names(iris)
colnames(iris)
rownames(iris)
dim(iris)
nrow(iris)
ncol(iris)
head(iris)
tail(iris)
str(iris)
?iris
class(iris)
attach(iris)
detach(iris)
ls(iris)
attach(iris)
ls(iris)
head(iris$Species)
detach(iris)
ls(iris)
head(iris$Species)
attach(iris)
head(Species)
getwd()
getwd()
setwd("G:/UDEMY/SDS/R Advanced")
setwd("./Weather Data")
getwd()
Chicago <- read.csv("Chicago-F.csv", row.names = 1)
Houston <- read.csv("Houston-F.csv", row.names = 1)
NewYork <- read.csv("NewYork-F.csv", row.names = 1)
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names = 1)
Chicago
Houston
NewYork
SanFrancisco
#These are dataframe
is.data.frame(Chicago)
typeof(Chicago)
#Lets convert to matrices:
Chicago <- as.matrix(Chicago)
Houston <- as.matrix(Houston)
NewYork <- as.matrix(NewYork)
SanFrancisco <- as.matrix(SanFrancisco)
is.matrix(Chicago)
#Lets put all into a list;
Weather <- list(Chicago=Chicago,Houston=Houston,NewYork=NewYork,SanFrancisco=SanFrancisco)
Weather
#Lets try sample
Weather[[3]]
Weather[3]
Weather$Houston
apply()
tapply()
#Using apply
?apply
apply(Chicago, 1, mean)
#Check
mean(Chicago["DaysWithPrecip",])
#analyze onr city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
#for Practice:
apply(Chicago, 2, max)
apply(Chicago,2, min)
#Compare:
apply(Chicago, 1, mean)
apply(NewYork, 1, mean)
apply(Houston, 1, mean)
apply(SanFrancisco, 1, mean)
#<<< (nearly) deliv 1: but there is a faster way
apply(Chicago, 1, mean)
Chicago
mean(Chicago[1,])}
output <- NULL #Preparing an empty vector
for(i in 1:5) {#run cycle
mean(Chicago[1,])
}
for(i in 1:5) {#run cycle
mean(Chicago[1,])
}
Chicago[1,]
mean(Chicago[1,])
output <- NULL #Preparing an empty vector
for(i in 1:5) {#run cycle
output[i] <- mean(Chicago[i,])
}
output
names(output) <- rownames(Chicago)
output
apply(Chicago, 1, mean)
apply(SanFrancisco, 1, mean)
apply(NewYork, 1, mean)
apply(Houston,1, mean)
?lapply
Chicago
t(Chicago)
Weather
lapply(Weather,t)  #t(Chicago), t(NewYork), t(Houston), t(SanFrancisco)
mynewlist <- lapply(Weather, t)
mynewlist
Cicago
Chicago
rbind(Chicago, NewRow = 1:12)
lapply(Weather, rbind, NewRow = 1:12)
?rowMeans
rowMeans(Chicago)
lapply(Weather, rowMeans)
lapply(Weather, rowSums/12)
lapply(Weather, rowSums)
Weather
Weather$Chicago[1,1]
lapply(Weather, "[", 1,1)
lapply(Weather,  1,1)
Weather
lapply(Weather, "[",1, )
Weather
lapply(Weather, "[", , 3)
col3 <- lapply(Weather, "[", , 3)
col3
t(col3)
lapply(Weather, rowMeans)
lapply(Weather, function(x) x[1,] )
lapply(Weather, function(x) x[5,] )
lapply(Weather, function(x) x[,12] )
lapply(Weather, function(z) z[1,]-z[2,])
lapply(Weather, function(z) z[1,]-z[2,])
lapply(Weather, function(z) (z[1,]-z[2,])/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
Weather
lapply(Weather, "[", 1, 7)
sapply(Weather, "[", 1, 7)
lapply(Weather, "[", 1, 10:12)
sapply(Weather, "[", 1, 10:12)
lapply(Weather, rowMeans)
sapply(Weather,rowMeans)
round(sapply(Weather, rowMeans),2)
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2)))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,]2))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2)
lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2)
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2)
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,]),2)
lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2)
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2)
lapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
lapply(Weather, function(z) z[1,]-z[2,])
lapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
sapply(Weather, function(z) round((z[1,]-z[2,]/z[2,],2)))
sapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2))
sapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2))
lapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
sapply(Weather, function(z) round((z[1,]-z[2,])/z[2,],2))
library(ggplot2)
sapply(Weather, rowMeans, simplify = F)
Weather
lapply(Weather, rowMeans)
Chicago
apply(Chicago, 1, Max)
apply(Chicago, 1, max)
lapply(Weather, apply, 1, max)
sapply(Weather, apply, 1, max)
sapply(Weather, apply, 1, min)
?which.max
Chicago
which.max(Chicago[1,])
names(which.max(Chicago,[1,]))
names(which.max(Chicago[1,]))
apply(Chicago, 1, function(x) names(which.max(x)))
lapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x)))
lapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x)))
lapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
sapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
